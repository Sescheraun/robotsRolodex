{"version":3,"sources":["componants/card/card.componant.jsx","componants/card-ist/card-list.componant.jsx","componants/search-box/search-box.componant.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","rollDice","dice","sides","rolls","die","roll","output","console","log","Math","floor","random","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAIaA,G,YAAO,SAACC,GAAD,OAChB,sBAAKC,UAAW,iBAAhB,UAEI,qBAGIC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,MAC3C,6BAAML,EAAMI,QAAQE,OACpB,mCAAON,EAAMI,QAAQC,GAArB,YCTCE,EAAW,SAAAP,GAAK,OACzB,qBAAKC,UAAY,YAAjB,SACKD,EAAMQ,SAASC,KAAI,SAAAL,GAAO,OACvB,cAAC,EAAD,CAAyBA,QAAWA,GAAvBA,EAAQC,UCLpBK,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAErB,uBACIX,UAAY,SACZY,KAAO,SACPF,YAAeA,EACfG,SAAYF,MC8DLG,G,wDA9Db,aAAe,IAAD,8BACZ,gBAgBFC,SAAW,SAACC,EAAMC,GAChB,IAAIC,EAAQ,CAACF,GACTG,EAAM,EACNC,EAAO,EACPC,EAAS,WAAaL,EAAO,IAAMC,EAEvC,IADAK,QAAQC,IAAIF,GACRF,EAAI,EAAGA,EAAIH,EAAMG,IACnBD,EAAMC,GAAQK,KAAKC,MAAMD,KAAKE,SAAWT,GAAO,EAChDG,GAAQF,EAAMC,GAEhBG,QAAQC,IAAIH,EAAMF,IA3BN,EA8BdP,aAAe,SAACgB,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SA5BrC,EAAKC,MAAQ,CACXzB,SAAU,GACRsB,YAAa,IALL,E,gEAWM,IAAD,OACjBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACrB,SAAU8B,S,+BAsB1CC,KAAKvB,SAAS,EAAE,GAFT,MAIyBuB,KAAKN,MAA9BzB,EAJA,EAIAA,SAAUsB,EAJV,EAIUA,YAEXU,EAAmBhC,EAASiC,QAAO,SAAArC,GAAO,OAC9CA,EAAQE,KAAKoC,cAAcC,SAASb,EAAYY,kBAGlD,OACE,sBAAKzC,UAAY,MAAjB,UACA,kDAEA,cAAC,EAAD,CACIU,YAAc,gBACdC,aAAgB2B,KAAK3B,eAGvB,cAAC,EAAD,CAAUJ,SAAUgC,W,GAtDVI,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.88243c1f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\n\r\nexport const Card = (props) => (\r\n    <div className ='card-container'>\r\n    \r\n        <img \r\n            // width=\"100\" \r\n            // height=\"100\" \r\n            alt=\"monster\" \r\n            src={`https://robohash.org/${props.monster.id}`} />\r\n            <h2>{ props.monster.name}</h2>\r\n            <h3> { props.monster.id } </h3> \r\n\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.componant';\r\n\r\nexport const CardList = props => (\r\n    <div className = 'card-list'>\r\n        {props.monsters.map(monster=> (\r\n            <Card key = {monster.id} monster = {monster} />    \r\n        ))}\r\n    </div> \r\n);","import './search-box.componant.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n\r\n    <input \r\n        className = 'search'\r\n        type = 'search' \r\n        placeholder = {placeholder}\r\n        onChange = {handleChange}  \r\n    />\r\n    \r\n)","import React, {Component} from 'react';\n\nimport {CardList} from './componants/card-ist/card-list.componant';\nimport {SearchBox} from './componants/search-box/search-box.componant';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: []\n      , searchField: ''\n    };\n\n    //this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({monsters: users}))\n  }\n\n  rollDice = (dice, sides) => {\n    let rolls = [dice];\n    let die = 0;\n    let roll = 0;\n    let output = \"rolling \" + dice + \"d\" + sides;\n    console.log(output);\n    for(die=0; die<dice; die++) {\n      rolls[die] = (Math.floor(Math.random() * sides)+1);\n      roll += rolls[die];\n    }\n    console.log(roll, rolls)\n  }\n\n  handleChange = (e) => { \n    this.setState({searchField: e.target.value}) \n  }\n\n  render() {\n\n    this.rollDice(3,6)\n\n    const {monsters, searchField} = this.state;\n  \n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase() )\n      )\n  \n    return(\n      <div className = 'App'>\n      <h1> Robots Rolodex </h1>\n\n      <SearchBox\n          placeholder = 'Search Robots'\n          handleChange = {this.handleChange}\n        />\n\n        <CardList monsters={filteredMonsters} />\n        \n      </div>\n    );\n    \n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}